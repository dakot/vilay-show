#!/usr/bin/python
# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
#
#   See COPYING file distributed along with the vilay package for the
#   copyright and license terms.
#
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
""""""

__docformat__ = 'restructuredtext'

# set up logging first
import logging
log_levels = dict(critical=logging.CRITICAL, error=logging.ERROR,
                  warning=logging.WARNING, info=logging.INFO,
                  debug=logging.DEBUG)
lgr = logging.getLogger('vilay')
# do chatterbox by default (but only for the vilay.* loggers)
lgr.setLevel(logging.DEBUG)


import sys
import argparse
import textwrap
import vilay.cmdline as mvcmd
from vilay.cmdline import helpers, common_args
import vilay

def _license_info():
    return """\
Copyright (c) 2012 vilay developers

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Written by Daniel Kottke with the help of numerous other contributors.
"""


# setup cmdline args parser
# main parser
parser = argparse.ArgumentParser(
                fromfile_prefix_chars='@',
                # usage="%(prog)s ...",
                description="""\
Here is an initial description that clearly needs improvement.
Anyway, here are the currently available commands:
""",
                epilog='',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                add_help=False
            )
# common options
helpers.parser_add_common_opt(parser, 'help')
helpers.parser_add_common_opt(parser,
                              'version',
                              version='vilay %s\n\n%s' % (vilay.__version__,
                                                          _license_info()))
if __debug__:
    parser.add_argument(
        '--dbg', action='store_true', dest='common_debug',
        help="do not catch exceptions and show exception traceback")
parser.add_argument('--log-level',
                    choices=('critical', 'error', 'warning', 'info', 'debug'),
                    dest='common_log_level',
                    help="""level of verbosity in log files. By default
                         everything, including debug messages is logged.""")
parser.add_argument('--verbose-level',
                    choices=('critical', 'error', 'warning', 'info', 'debug'),
                    dest='common_verbose_level',
                    help="""level of verbosity of console output. By default
                         only warnings and errors are printed.""")

# subparsers
subparsers = parser.add_subparsers()
# for all subcommand modules it can find
cmd_short_description = []
for cmd in sorted([c for c in dir(mvcmd) if c.startswith('cmd_')]):
    cmd_name = cmd[4:]
    subcmdmod = getattr(__import__('vilay.cmdline',
                                   globals(), locals(),
                                   [cmd], -1),
                        cmd)
    # deal with optional parser args
    if 'parser_args' in subcmdmod.__dict__:
        parser_args = subcmdmod.parser_args
    else:
        parser_args = dict()
    # use module description, if no explicit description is available
    if not 'description' in parser_args:
        parser_args['description'] = subcmdmod.__doc__
    # create subparser, use module suffix as cmd name
    subparser = subparsers.add_parser(cmd_name, add_help=False, **parser_args)
    # all subparser can report the version
    helpers.parser_add_common_opt(
            subparser, 'version',
            version='vilay-%s %s\n\n%s' % (cmd_name, vilay.__version__,
                                             _license_info()))
    # our own custom help for all commands
    helpers.parser_add_common_opt(subparser, 'help')
    # let module configure the parser
    subcmdmod.setup_parser(subparser)
    # logger for command

    # configure 'run' function for this command
    subparser.set_defaults(func=subcmdmod.run,
                           logger=logging.getLogger('vilay.%s' % cmd))
    # store short description for later
    sdescr = getattr(subcmdmod, 'short_description',
                     parser_args['description'].split('\n')[0])
    cmd_short_description.append((cmd_name, sdescr))

# create command summary
cmd_summary = []
for cd in cmd_short_description:
    cmd_summary.append('%s\n%s\n\n' \
                       % (cd[0],
                          textwrap.fill(cd[1], 75,
                              initial_indent=' ' * 4,
                              subsequent_indent=' ' * 4)))
parser.description = '%s\n%s\n\n%s' \
        % (parser.description,
           '\n'.join(cmd_summary),
           textwrap.fill("""\
Detailed usage information for individual commands is
available via command-specific help options, i.e.:
%s <command> --help""" % sys.argv[0],
                            75, initial_indent='',
                            subsequent_indent=''))

# parse cmd args
args = parser.parse_args()
# default log levels
args.common_log_level = log_levels.get(args.common_log_level, logging.DEBUG)
args.common_verbose_level = log_levels.get(args.common_verbose_level,
                                           logging.WARNING)
# configure the loggers
# console output
console = logging.StreamHandler()
console.setLevel(args.common_verbose_level)
# TODO: we may want a more fancy custom formatter
formatter = logging.Formatter(vilay.cfg.get('logging', 'console format'))
console.setFormatter(formatter)
lgr.addHandler(console)

# run the function associated with the selected command
try:
    args.func(args)
except Exception as exc:
    lgr.error('%s (%s)' % (str(exc), exc.__class__.__name__))
    if args.common_debug:
        import pdb
        pdb.post_mortem()
    sys.exit(1)
